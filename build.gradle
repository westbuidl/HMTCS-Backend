plugins {
    id 'application'
    id 'jacoco'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.springframework.boot' version '3.5.4'
    id 'com.github.ben-manes.versions' version '0.52.0'
    id 'org.sonarqube' version '6.2.0.5505'
    // Applies analysis tools including checkstyle and OWASP Dependency checker.
    id 'uk.gov.hmcts.java' version '0.12.67'
    id 'java'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

sourceSets {
    functionalTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/functionalTest/java')
        }
        resources.srcDir file('src/functionalTest/resources')
    }

    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }

    smokeTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/smokeTest/java')
        }
        resources.srcDir file('src/smokeTest/resources')
    }
}

configurations {
    functionalTestImplementation.extendsFrom testImplementation
    functionalTestRuntimeOnly.extendsFrom runtimeOnly

    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly

    smokeTestImplementation.extendsFrom testImplementation
    smokeTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked"
    // Remove -Werror to allow warnings during development
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
        showStandardStreams = true
    }
    
    // Enhanced test configuration
    systemProperty 'spring.profiles.active', 'test'
    
    // JVM arguments for tests
    jvmArgs = [
        '--add-opens=java.base/java.lang=ALL-UNNAMED',
        '--add-opens=java.base/java.util=ALL-UNNAMED'
    ]
}

test {
    failFast = false
    finalizedBy jacocoTestReport
}

task functional(type: Test) {
    description = "Runs functional tests"
    group = "Verification"
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    
    // Set different port for functional tests
    systemProperty 'server.port', '0'
    systemProperty 'TEST_URL', 'http://localhost:4000'
}

task integration(type: Test) {
    description = "Runs integration tests"
    group = "Verification"
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    failFast = false
    
    // Ensure tests use test profile
    systemProperty 'spring.profiles.active', 'test'
}

task smoke(type: Test) {
    description = "Runs Smoke Tests"
    testClassesDirs = sourceSets.smokeTest.output.classesDirs
    classpath = sourceSets.smokeTest.runtimeClasspath
    
    systemProperty 'TEST_URL', 'http://localhost:4000'
}

// Enhanced Jacoco configuration
jacocoTestReport {
    executionData(test, integration)
    reports {
        xml.required = true
        csv.required = false
        html.required = true
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/*Application*'
            ])
        }))
    }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
project.tasks['check'].dependsOn integration

sonarqube {
    properties {
        property "sonar.projectName", "Reform :: test-backend"
        property "sonar.projectKey", "uk.gov.hmcts.reform:test-backend"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}

dependencyUpdates {
    def isNonStable = { String version ->
        def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
        def regex = /^[0-9,.v-]+$/
        return !stableKeyword && !(version ==~ regex)
    }
    rejectVersionIf { selection ->
        return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
    }
}

dependencyCheck {
    suppressionFile = 'config/owasp/suppressions.xml'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

ext {
    log4JVersion = "2.25.1"
    logbackVersion = "1.5.18"
}

ext['snakeyaml.version'] = '2.2'

dependencies {
    // Core Spring Boot dependencies
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
    
    // Database dependencies
    runtimeOnly group: 'com.h2database', name: 'h2'

    // OpenAPI documentation
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.8.9'

    // Logging
    implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.9'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
    implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
    implementation group: 'ch.qos.logback', name: 'logback-core', version: logbackVersion

    // REST Assured and Lombok
    implementation group: 'io.rest-assured', name: 'rest-assured'
    implementation group: 'org.projectlombok', name: 'lombok'
    annotationProcessor 'org.projectlombok:lombok'
    
    // Test annotation processors
    testAnnotationProcessor 'org.projectlombok:lombok'
    integrationTestAnnotationProcessor 'org.projectlombok:lombok'
    functionalTestAnnotationProcessor 'org.projectlombok:lombok'
    smokeTestAnnotationProcessor 'org.projectlombok:lombok'

    // Testing dependencies - FIXED: Added missing JPA test dependencies
    testImplementation(platform('org.junit:junit-bom:5.13.4'))
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    
    // CRITICAL: Add JPA test dependencies for @AutoConfigureTestDatabase
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-test-autoconfigure'
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
    
    // Additional testing libraries
    testImplementation group: 'org.assertj', name: 'assertj-core'
    testImplementation group: 'org.mockito', name: 'mockito-core'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter'
    testImplementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310'
    
    // H2 database for testing
    testRuntimeOnly group: 'com.h2database', name: 'h2'
}

mainClassName = 'uk.gov.hmcts.reform.dev.Application'

bootJar {
    archiveFileName = "test-backend.jar"

    manifest {
        attributes('Implementation-Version': project.version.toString())
    }
}

// Custom task to run all tests
task testAll(dependsOn: [test, integration, functional, smoke]) {
    group = 'verification'
    description = 'Runs all test suites'
}

// Development helper task
task dev {
    group = 'application'
    description = 'Runs the application with development profile'
    dependsOn bootRun
    doFirst {
        bootRun.systemProperty 'spring.profiles.active', 'dev'
    }
}

// Gradle 7.x issue workaround
rootProject.tasks.named("processSmokeTestResources") {
    duplicatesStrategy = 'include'
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}